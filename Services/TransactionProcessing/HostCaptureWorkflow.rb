require 'json'

module Workflows
	def self.HostCapture(client)

client.do_log=true


# Get service information to see the available functions.

service_response = NabCWS_endpoint_svcinfo.get_service_info(client)
p( service_response.data )
test_assert(service_response.data['Success'], client)

pindebit_auth_template= {
	:Transaction => {
		:TenderData => {
			:CardData => {
				:CardType => Nab::TypeCardType::MasterCard,
				:CardholderName => nil,
				:PAN => '5454545454545454',
				:Expire => '1215',
				:Track2Data => '5454545454545454=15121010134988000010',
			},
			:CardSecurityData => {
				:KeySerialNumber => '12345678',
				:PIN => '1234'
			},
		},
		:TransactionData => {
			:AccountType => Nab::AccountType::CheckingAccount,
			:EntryMode => Nab::EntryMode::Keyed,
		}
	}
}

    if (service_response.data["BankcardServices"].length != 0) then

      service_response.data["BankcardServices"].each { |service|

        if (service["ServiceId"] != client.workflow_id) then next end
        #if (service["ServiceId"] != "4CACF00001") then next end

        #client.workflow_id = service["ServiceId"]

        profiles_response = NabCWS_endpoint_merchinfo.get_merchant_profiles(client, "")
        p( profiles_response.data )
        test_assert(profiles_response.data["Success"]==true, client)
        if (profiles_response.data["Results"].length<= 0 )
          p ("\n\nFAILED: Need a merchant profile for the service id: ".client.workflow_id)
          next
        end
        # Skip the service if there aren't any merchant profiles defined.

        # We only need to test one merchant profile.
        profiles_response.data["Results"].each { |the_merchant_profile|
          client.merchant_profile_id = the_merchant_profile["id"]
          if (client.merchant_profile_id[0..7] != "Default") then break end
          # Avoid selecting a "Default" profile, generated by SaveMerchant profile in the basic testing.
          # Fallthrough is okay. It selects the most recently created profile.
        }

        profile= NabCWS_endpoint_merchinfo.is_merchant_profile_initialized(client, "")
        p( profile.data )
        test_assert(profile.data["Success"]==true, client)

		####################
        # p('sonofabitch')
         # if RbConfig::UseWorkflow
           # authorized_response = NabCWS_endpoint_txn.authorize_encrypted(client, {})
         # else
        #     authorized_response = NabCWS_endpoint_txn.authorize(client, {})
        #   #end
        #
        # p(authorized_response.data["TransactionId"] )
        # test_assert(authorized_response.data["Success"]==true, client)
        # test_assert(authorized_response.data["Status"]!="Failure", client)
        #
        #   captured_response = NabCWS_endpoint_txn.capture(client, {
        #     "DifferenceData" => [{
        #       '$type' => 'BankcardCapture,http://schemas.ipcommerce.com/CWS/v2.0/Transactions/Bankcard',
        #       "Amount" => 10.00,
        #       "TransactionId" => authorized_response.data["TransactionId"]
        #     }]
        #   })
        #
			   #  p(captured_response.data)

          if RbConfig::UseWorkflow
           captured_response = NabCWS_endpoint_txn.authorize_and_capture_encrypted(client, {})
          else
           captured_response = NabCWS_endpoint_txn.authorize_and_capture(client, {})
          end
         # captured_response = NabCWS_endpoint_txn.authorize_and_capture(client, {})
          p( captured_response.data )

          test_assert(captured_response.data['Success'], client)
          test_assert(captured_response.data['Status']!='Failure', client)

          response = NabCWS_endpoint_txn.return_by_id(client, {
            :DifferenceData => {
              :TransactionId => captured_response.data["TransactionId"]}})
          p( response.data )
      }
       end
    end
  end

